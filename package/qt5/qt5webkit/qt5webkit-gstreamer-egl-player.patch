--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp	2013-04-09 02:11:44.000000000 +0200
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp	2013-05-16 20:58:36.090204327 +0200
@@ -35,8 +35,6 @@
 #include "GStreamerVersioning.h"
 #include "GraphicsContext.h"
 #include "GraphicsTypes.h"
-#include "ImageGStreamer.h"
-#include "ImageOrientation.h"
 #include "IntRect.h"
 #include "KURL.h"
 #include "MIMETypeRegistry.h"
@@ -44,7 +42,6 @@
 #include "NotImplemented.h"
 #include "SecurityOrigin.h"
 #include "TimeRanges.h"
-#include "VideoSinkGStreamer.h"
 #include "WebKitWebSourceGStreamer.h"
 #include <gst/gst.h>
 #include <gst/video/video.h>
@@ -53,12 +50,16 @@
 #include <wtf/gobject/GOwnPtr.h>
 #include <wtf/text/CString.h>
 
-#ifdef GST_API_VERSION_1
-#include <gst/audio/streamvolume.h>
-#else
 #include <gst/interfaces/streamvolume.h>
+
+#if USE(ACCELERATED_COMPOSITING) && USE(TEXTURE_MAPPER_GL) && PLATFORM(QT)
+#define GL_GLEXT_PROTOTYPES
+#include "OpenGLShims.h"
 #endif
 
+#define EGL_EGLEXT_PROTOTYPES
+#include <gst/egl/egl.h>
+
 // GstPlayFlags flags from playbin2. It is the policy of GStreamer to
 // not publicly expose element-specific enums. That's why this
 // GstPlayFlags enum has been copied here.
@@ -74,11 +75,14 @@
     GST_PLAY_FLAG_BUFFERING     = 0x000000100
 } GstPlayFlags;
 
-#ifdef GST_API_VERSION_1
-static const char* gPlaybinName = "playbin";
-#else
+struct _EGLDetails {
+    EGLDisplay display;
+    EGLContext context;
+    EGLSurface draw;
+    EGLSurface read;
+};
+
 static const char* gPlaybinName = "playbin2";
-#endif
 
 GST_DEBUG_CATEGORY_STATIC(webkit_media_player_debug);
 #define GST_CAT_DEFAULT webkit_media_player_debug
@@ -163,9 +167,42 @@
     return FALSE;
 }
 
-static void mediaPlayerPrivateRepaintCallback(WebKitVideoSink*, GstBuffer *buffer, MediaPlayerPrivateGStreamer* playerPrivate)
+static GstBusSyncReply mediaPlayerPrivateSyncMessageCallback (GstBus * bus, GstMessage * message, MediaPlayerPrivateGStreamer* player)
+{
+  if ((GST_MESSAGE_TYPE (message) == GST_MESSAGE_ELEMENT) &&
+      gst_structure_has_name (message->structure, "need-egl-pool")) {
+    player->queueObject (GST_MINI_OBJECT_CAST (gst_message_ref (message)), TRUE);
+  }
+  return GST_BUS_PASS;
+}
+
+static void mediaPlayerPrivateVideoPrerollCallback(GstElement* fakesink, GstBuffer* buffer, GstPad* pad, MediaPlayerPrivateGStreamer* player)
+{
+    player->queueObject(GST_MINI_OBJECT_CAST (gst_buffer_ref (buffer)), FALSE);
+}
+
+static void mediaPlayerPrivateVideoBufferCallback(GstElement* fakesink, GstBuffer* buffer, GstPad* pad, MediaPlayerPrivateGStreamer* player)
 {
-    playerPrivate->triggerRepaint(buffer);
+    player->queueObject(GST_MINI_OBJECT_CAST (gst_buffer_ref (buffer)), TRUE);
+}
+
+static gboolean mediaPlayerPrivateVideoEventCallback(GstPad* pad, GstEvent* event, MediaPlayerPrivateGStreamer* player)
+{
+    switch (GST_EVENT_TYPE (event)) {
+        case GST_EVENT_FLUSH_START:
+            player->queueFlushStart();
+            break;
+        case GST_EVENT_FLUSH_STOP:
+            player->queueFlushStop();
+            break;
+        case GST_EVENT_EOS:
+            player->queueObject(GST_MINI_OBJECT_CAST (gst_event_ref (event)), TRUE);
+            break;
+        default:
+            break;
+    }
+
+    return TRUE;
 }
 
 PassOwnPtr<MediaPlayerPrivateInterface> MediaPlayerPrivateGStreamer::create(MediaPlayer* player)
@@ -205,8 +242,7 @@
 MediaPlayerPrivateGStreamer::MediaPlayerPrivateGStreamer(MediaPlayer* player)
     : m_player(player)
     , m_playBin(0)
-    , m_webkitVideoSink(0)
-    , m_fpsSink(0)
+    , m_videoSink(0)
     , m_source(0)
     , m_seekTime(0)
     , m_changingRate(false)
@@ -216,7 +252,6 @@
     , m_readyState(MediaPlayer::HaveNothing)
     , m_isStreaming(false)
     , m_size(IntSize())
-    , m_buffer(0)
     , m_mediaLocations(0)
     , m_mediaLocationCurrentIndex(0)
     , m_resetPipeline(false)
@@ -243,31 +278,47 @@
     , m_webkitAudioSink(0)
     , m_totalBytes(-1)
     , m_originalPreloadWasAutoAndWasOverridden(false)
+#if USE(ACCELERATED_COMPOSITING) && USE(TEXTURE_MAPPER_GL)
+    , m_texture(0)
+    , m_textureMapper(0)
+#endif
+    , m_queueFlushing(false)
+    , m_queueLastObject(0)
+    , m_lastEGLMemory(0)
+    , m_egl_details(0)
+
 {
     if (initializeGStreamerAndRegisterWebKitElements())
         createGSTPlayBin();
+
+    m_queue = g_async_queue_new_full((GDestroyNotify) gst_mini_object_unref);
+    m_queueLock = g_mutex_new();
+    m_flowLock = g_mutex_new();
+    m_queueCond = g_cond_new();
 }
 
 MediaPlayerPrivateGStreamer::~MediaPlayerPrivateGStreamer()
 {
+    LOG_MEDIA_MESSAGE("Player destructor");
+    queueFlushStart();
+    
     if (m_fillTimer.isActive())
         m_fillTimer.stop();
 
-    if (m_buffer)
-        gst_buffer_unref(m_buffer);
-    m_buffer = 0;
-
     if (m_mediaLocations) {
         gst_structure_free(m_mediaLocations);
         m_mediaLocations = 0;
     }
 
-#ifndef GST_API_VERSION_1
-    if (m_videoSinkBin) {
-        gst_object_unref(m_videoSinkBin);
-        m_videoSinkBin = 0;
+    if (m_egl_details) {
+        delete m_egl_details;
+        m_egl_details = 0;
+    }
+
+    if (m_videoSink) {
+        gst_object_unref(m_videoSink);
+        m_videoSink = 0;
     }
-#endif
 
     if (m_playBin) {
         gst_element_set_state(m_playBin, GST_STATE_NULL);
@@ -288,6 +339,25 @@
 
     if (m_audioTimerHandler)
         g_source_remove(m_audioTimerHandler);
+
+    queueFlushStop();
+
+    if (m_queue) {
+        g_async_queue_unref (m_queue);
+    }
+
+    if (m_queueLock) {
+        g_mutex_free (m_queueLock);
+    }
+
+    if (m_flowLock) {
+        g_mutex_free (m_flowLock);
+    }
+
+    if (m_queueCond) {
+        g_cond_free (m_queueCond);
+    }
+    LOG_MEDIA_MESSAGE("Player destroyed");
 }
 
 void MediaPlayerPrivateGStreamer::load(const String& url)
@@ -392,6 +462,8 @@
 
 void MediaPlayerPrivateGStreamer::prepareToPlay()
 {
+    dequeueObjects();
+
     m_isEndReached = false;
     m_seeking = false;
 
@@ -414,8 +486,21 @@
     if (m_isEndReached)
         return;
 
+    /* In case we were waiting for providing a pool dequeue */
+    dequeueObjects();
+
+    queueFlushStart();
+
+    g_mutex_lock (m_queueLock);
+    if (m_lastEGLMemory)
+        gst_egl_image_memory_unref (m_lastEGLMemory);
+    m_lastEGLMemory = 0;
+
     if (changePipelineState(GST_STATE_PAUSED))
         LOG_MEDIA_MESSAGE("Pause");
+
+    m_queueFlushing = false;
+    g_mutex_unlock (m_queueLock);
 }
 
 float MediaPlayerPrivateGStreamer::duration() const
@@ -436,11 +521,7 @@
     GstFormat timeFormat = GST_FORMAT_TIME;
     gint64 timeLength = 0;
 
-#ifdef GST_API_VERSION_1
-    bool failure = !gst_element_query_duration(m_playBin, timeFormat, &timeLength) || static_cast<guint64>(timeLength) == GST_CLOCK_TIME_NONE;
-#else
     bool failure = !gst_element_query_duration(m_playBin, &timeFormat, &timeLength) || timeFormat != GST_FORMAT_TIME || static_cast<guint64>(timeLength) == GST_CLOCK_TIME_NONE;
-#endif
     if (failure) {
         LOG_MEDIA_MESSAGE("Time duration query failed for %s", m_url.string().utf8().data());
         return numeric_limits<float>::infinity();
@@ -857,11 +938,7 @@
     case GST_MESSAGE_BUFFERING:
         processBufferingStats(message);
         break;
-#ifdef GST_API_VERSION_1
-    case GST_MESSAGE_DURATION_CHANGED:
-#else
     case GST_MESSAGE_DURATION:
-#endif
         LOG_MEDIA_MESSAGE("Duration changed");
         durationChanged();
         break;
@@ -873,6 +950,288 @@
     return TRUE;
 }
 
+void MediaPlayerPrivateGStreamer::triggerRepaint()
+{
+    m_player->repaint();
+}
+
+static gboolean mediaPlayerPrivateProcessQueueCallback (MediaPlayerPrivateGStreamer* player)
+{
+    player->triggerRepaint();
+    return FALSE;
+}
+
+gboolean MediaPlayerPrivateGStreamer::queueObject (GstMiniObject * obj, gboolean synchronous)
+{
+    g_mutex_lock (m_flowLock);
+    if (m_queueFlushing) {
+        gst_mini_object_unref (obj);
+        g_mutex_unlock (m_flowLock);
+        return FALSE;
+    }
+
+    LOG_MEDIA_MESSAGE("queue object: %p", obj);
+    g_async_queue_push (m_queue, obj);
+
+    g_timeout_add_full (G_PRIORITY_HIGH, 0, (GSourceFunc) mediaPlayerPrivateProcessQueueCallback,
+        this, NULL);
+
+    g_mutex_lock (m_queueLock);
+    if (synchronous) {
+        /* Waiting for object to be handled */
+        do {
+            g_cond_wait (m_queueCond, m_queueLock);
+        } while (!m_queueFlushing && m_queueLastObject != obj);
+    }
+    g_mutex_unlock (m_queueLock);
+    g_mutex_unlock (m_flowLock);
+    return TRUE;
+}
+
+void MediaPlayerPrivateGStreamer::dequeueObjects ()
+{
+    GstMiniObject *object = NULL;
+    bool done = false;
+    gint length = g_async_queue_length (m_queue);
+
+    LOG_MEDIA_MESSAGE("queue length: %d", length);
+    if (length == 0)
+        return;
+
+    g_mutex_lock (m_queueLock);
+    if (m_queueFlushing) {
+        g_cond_broadcast (m_queueCond);
+        done = true;
+    }
+    g_mutex_unlock (m_queueLock);
+
+    while (!done && (object = GST_MINI_OBJECT_CAST (g_async_queue_try_pop (m_queue)))) {
+        if (GST_IS_BUFFER (object)) {
+            GstBuffer *buffer = GST_BUFFER_CAST (object);
+            g_mutex_lock (m_queueLock);
+            if (m_lastEGLMemory) {
+                gst_egl_image_memory_unref (m_lastEGLMemory);
+                m_lastEGLMemory = 0;
+            }
+            if (!GST_BUFFER_FLAG_IS_SET (buffer, GST_BUFFER_FLAG_PREROLL) && !m_queueFlushing) {
+                GstEGLImageMemory *mem = (GstEGLImageMemory *) GST_BUFFER_DATA (buffer);
+
+                m_lastEGLMemory = gst_egl_image_memory_ref (mem);
+            }
+            gst_buffer_unref (buffer);
+            g_mutex_unlock (m_queueLock);
+            /* Dequeue buffers one by one */
+            done = true;
+        } else if (GST_IS_MESSAGE (object)) {
+            GstMessage *message = GST_MESSAGE_CAST (object);
+            if (gst_structure_has_name (message->structure, "need-egl-pool")) {
+                GstElement *element = GST_ELEMENT (GST_MESSAGE_SRC (message));
+                gint size, width, height;
+
+                gst_message_parse_need_egl_pool (message, &size, &width, &height);
+
+                if (g_object_class_find_property (G_OBJECT_GET_CLASS (element), "pool")) {
+                    GstEGLImageMemoryPool *pool = NULL;
+
+                    if ((pool = createEGLPool (size, width, height))) {
+                        g_object_set (element, "pool", pool, NULL);
+                    }
+                }
+            }
+            gst_message_unref (message);
+            done = true;
+        } else if (GST_IS_EVENT (object)) {
+            GstEvent *event = GST_EVENT_CAST (object);
+
+            switch (GST_EVENT_TYPE (event)) {
+                case GST_EVENT_EOS:
+                    g_mutex_lock (m_queueLock);
+                    if (m_lastEGLMemory) {
+                        gst_egl_image_memory_unref (m_lastEGLMemory);
+                        m_lastEGLMemory = 0;
+                    }
+                    g_mutex_unlock (m_queueLock);
+                    break;
+                default:
+                    break;
+            }
+            gst_event_unref (event);
+        }
+
+        g_mutex_lock (m_queueLock);
+        m_queueLastObject = object;
+        LOG_MEDIA_MESSAGE("dequeued %p", object);
+        g_cond_broadcast (m_queueCond);
+        g_mutex_unlock (m_queueLock);
+    }
+    LOG_MEDIA_MESSAGE("done");
+}
+
+void MediaPlayerPrivateGStreamer::queueFlushStart()
+{
+    LOG_MEDIA_MESSAGE("Flush Start");
+
+    g_mutex_lock (m_queueLock);
+    if (m_lastEGLMemory)
+        gst_egl_image_memory_unref (m_lastEGLMemory);
+    m_lastEGLMemory = 0;
+
+    m_queueFlushing = true;
+    g_cond_broadcast (m_queueCond);
+    g_mutex_unlock (m_queueLock);
+    g_mutex_lock (m_flowLock);
+    g_mutex_unlock (m_flowLock);
+}
+
+void MediaPlayerPrivateGStreamer::queueFlushStop()
+{
+    GstMiniObject *object = NULL;
+
+    g_mutex_lock (m_queueLock);
+    if (m_lastEGLMemory)
+        gst_egl_image_memory_unref (m_lastEGLMemory);
+    m_lastEGLMemory = 0;
+
+    while ((object = GST_MINI_OBJECT_CAST (g_async_queue_try_pop (m_queue)))) {
+        gst_mini_object_unref (object);
+    }
+    m_queueLastObject = NULL;
+    m_queueFlushing = false;
+    g_mutex_unlock (m_queueLock);
+    LOG_MEDIA_MESSAGE("Flush Stop");
+}
+
+void MediaPlayerPrivateGStreamer::updateTexture()
+{
+    GstEGLImageMemory *mem;
+    g_mutex_lock (m_queueLock);
+    mem = m_lastEGLMemory;
+    g_mutex_unlock (m_queueLock);
+
+    if (!mem)
+        return;
+
+    GLint texId = static_cast<const BitmapTextureGL*>(m_texture.get())->id();
+
+    GLint ctexId;
+    glGetIntegerv(GL_TEXTURE_BINDING_2D, &ctexId);
+
+    LOG_MEDIA_MESSAGE ("Upload EGL image: %p on texture %d current texture was: %d",
+        gst_egl_image_memory_get_image (mem), texId, ctexId);
+
+    glEnable(GL_TEXTURE_2D);
+    glBindTexture (GL_TEXTURE_2D, texId);
+    glEGLImageTargetTexture2DOES (GL_TEXTURE_2D, gst_egl_image_memory_get_image (mem));
+    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+}
+
+static void destroy_pool_resources (GstEGLImageMemoryPool * pool, gpointer user_data)
+{
+    gint i, size = gst_egl_image_memory_pool_get_size (pool);
+    EGLClientBuffer client_buffer;
+    EGLImageKHR image;
+    EGLint error;
+
+    /* reset error state */
+    while (glGetError() != GL_NO_ERROR);
+
+    GstEGLDisplay * gst_display = gst_egl_image_memory_pool_get_display (pool);
+    EGLDisplay display = gst_egl_display_get (gst_display);
+    gst_egl_display_unref (gst_display);
+
+    for (i = 0; i < size; i++) {
+        if (gst_egl_image_memory_pool_get_resources (pool, i, &client_buffer,
+                &image)) {
+            GLuint tid = (GLuint) client_buffer;
+            error = EGL_SUCCESS;
+
+            if (image != EGL_NO_IMAGE_KHR) {
+                eglDestroyImageKHR (display, image);
+                if ((error = eglGetError ()) != EGL_SUCCESS) {
+                    LOG_MEDIA_MESSAGE("eglDestroyImageKHR failed %x", error);
+                }
+            }
+
+            if (tid) {
+                error = GL_NO_ERROR;
+                glDeleteTextures (1, &tid);
+                if ((error = glGetError ()) != GL_NO_ERROR) {
+                    LOG_MEDIA_MESSAGE("glDeleteTextures failed %x", error);
+                }
+            }
+            LOG_MEDIA_MESSAGE("destroyed texture %x image %p", tid, image);
+        }
+    }
+}
+
+GstEGLImageMemoryPool* MediaPlayerPrivateGStreamer::createEGLPool(gint size, gint width, gint height)
+{
+    GstEGLImageMemoryPool *pool;
+    gint i;
+    EGLint error;
+    GstEGLDisplay *gst_display;
+
+    if (!m_egl_details) {
+        m_egl_details = new EGLDetails();
+        m_egl_details->display = eglGetCurrentDisplay();
+        m_egl_details->context = eglGetCurrentContext();
+        m_egl_details->draw = eglGetCurrentSurface(0);
+        m_egl_details->read = eglGetCurrentSurface(1);
+        LOG_MEDIA_MESSAGE("display %p context %p", m_egl_details->display, m_egl_details->context);
+    }
+
+    /* reset error state */
+    while (glGetError() != GL_NO_ERROR);
+
+    gst_display = gst_egl_display_new (m_egl_details->display, NULL, NULL);
+    pool = gst_egl_image_memory_pool_new (size, gst_display, this,
+        destroy_pool_resources);
+    gst_egl_display_unref (gst_display);
+
+    for (i = 0; i < size; i++) {
+        GLuint tid;
+        EGLImageKHR image;
+
+        error = GL_NO_ERROR;
+        glGenTextures (1, &tid);
+        if ((error = glGetError ()) != GL_NO_ERROR) {
+            LOG_MEDIA_MESSAGE("glGenTextures failed %x", error);
+            goto failed;
+        }
+
+        glBindTexture (GL_TEXTURE_2D, tid);
+        glTexImage2D (GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA,
+            GL_UNSIGNED_BYTE, NULL);
+        if ((error = glGetError ()) != GL_NO_ERROR) {
+          LOG_MEDIA_MESSAGE("glTexImage2D failed %x", error);
+          goto failed;
+        }
+
+        /* Create EGL Image */
+        error = EGL_SUCCESS;
+        image = eglCreateImageKHR (m_egl_details->display, m_egl_details->context,
+            EGL_GL_TEXTURE_2D_KHR, (EGLClientBuffer) tid, 0);
+
+        if (image == EGL_NO_IMAGE_KHR) {
+          if ((error = eglGetError ()) != EGL_SUCCESS) {
+            LOG_MEDIA_MESSAGE("eglCreateImageKHR failed %x", error);
+          } else {
+            LOG_MEDIA_MESSAGE("eglCreateImageKHR failed");
+          }
+          goto failed;
+        }
+        LOG_MEDIA_MESSAGE("created texture %x image %p", tid, image);
+        gst_egl_image_memory_pool_set_resources (pool, i, (EGLClientBuffer) tid,
+            image);
+    }
+    return pool;
+
+failed:
+    gst_egl_image_memory_pool_unref (pool);
+    return NULL;
+}
+
 void MediaPlayerPrivateGStreamer::processBufferingStats(GstMessage* message)
 {
     // This is the immediate buffering that needs to happen so we have
@@ -999,11 +1358,7 @@
 
     GstFormat fmt = GST_FORMAT_BYTES;
     gint64 length = 0;
-#ifdef GST_API_VERSION_1
-    if (gst_element_query_duration(m_source.get(), fmt, &length)) {
-#else
     if (gst_element_query_duration(m_source.get(), &fmt, &length)) {
-#endif
         LOG_MEDIA_MESSAGE("totalBytes %" G_GINT64_FORMAT, length);
         m_totalBytes = static_cast<unsigned>(length);
         m_isStreaming = !length;
@@ -1015,17 +1370,6 @@
     GstIterator* iter = gst_element_iterate_src_pads(m_source.get());
     bool done = false;
     while (!done) {
-#ifdef GST_API_VERSION_1
-        GValue item = G_VALUE_INIT;
-        switch (gst_iterator_next(iter, &item)) {
-        case GST_ITERATOR_OK: {
-            GstPad* pad = static_cast<GstPad*>(g_value_get_object(&item));
-            gint64 padLength = 0;
-            if (gst_pad_query_duration(pad, fmt, &padLength) && padLength > length)
-                length = padLength;
-            break;
-        }
-#else
         gpointer data;
 
         switch (gst_iterator_next(iter, &data)) {
@@ -1036,7 +1380,6 @@
                 length = padLength;
             break;
         }
-#endif
         case GST_ITERATOR_RESYNC:
             gst_iterator_resync(iter);
             break;
@@ -1046,10 +1389,6 @@
             done = true;
             break;
         }
-
-#ifdef GST_API_VERSION_1
-        g_value_unset(&item);
-#endif
     }
 
     gst_iterator_free(iter);
@@ -1063,16 +1402,14 @@
 unsigned MediaPlayerPrivateGStreamer::decodedFrameCount() const
 {
     guint64 decodedFrames = 0;
-    if (m_fpsSink)
-        g_object_get(m_fpsSink, "frames-rendered", &decodedFrames, NULL);
+    /* FIXME: Count frames */
     return static_cast<unsigned>(decodedFrames);
 }
 
 unsigned MediaPlayerPrivateGStreamer::droppedFrameCount() const
 {
     guint64 framesDropped = 0;
-    if (m_fpsSink)
-        g_object_get(m_fpsSink, "frames-dropped", &framesDropped, NULL);
+    /* FIXME: Count frames */
     return static_cast<unsigned>(framesDropped);
 }
 
@@ -1093,7 +1430,7 @@
     GstQuery* query = gst_query_new_position(GST_FORMAT_BYTES);
     gint64 position = 0;
 
-    if (gst_element_query(m_webkitVideoSink, query))
+    if (gst_element_query(m_videoSink, query))
         gst_query_parse_position(query, 0, &position);
 
     gst_query_unref(query);
@@ -1209,8 +1546,7 @@
                 m_networkState = MediaPlayer::Loading;
 
                 LOG_MEDIA_MESSAGE("[Buffering] Pausing stream for buffering.");
-
-                gst_element_set_state(m_playBin, GST_STATE_PAUSED);
+                pause();
             }
         } else
             m_paused = true;
@@ -1446,7 +1782,10 @@
 
     if (!m_player->mediaPlayerClient()->mediaPlayerIsLooping()) {
         m_paused = true;
+        LOG_MEDIA_MESSAGE("Setting pipeline to NULL state");
+        queueFlushStart();
         gst_element_set_state(m_playBin, GST_STATE_NULL);
+        queueFlushStop();
     }
 }
 
@@ -1551,36 +1890,60 @@
 {
 }
 
-
-void MediaPlayerPrivateGStreamer::triggerRepaint(GstBuffer* buffer)
-{
-    g_return_if_fail(GST_IS_BUFFER(buffer));
-    gst_buffer_replace(&m_buffer, buffer);
-    m_player->repaint();
-}
-
 void MediaPlayerPrivateGStreamer::paint(GraphicsContext* context, const IntRect& rect)
 {
-    if (context->paintingDisabled())
+#if USE(ACCELERATED_COMPOSITING) && USE(TEXTURE_MAPPER_GL)
+    if (m_texture) {
         return;
+    }
+#endif
 
-    if (!m_player->visible())
+    if (context->paintingDisabled())
         return;
 
-    if (!m_buffer)
+    if (!m_player->visible())
         return;
 
     GRefPtr<GstCaps> caps = webkitGstGetPadCaps(m_videoSinkPad.get());
     if (!caps)
         return;
+}
+
+#if USE(ACCELERATED_COMPOSITING) && USE(TEXTURE_MAPPER_GL)
+bool MediaPlayerPrivateGStreamer::supportsAcceleratedRendering() const
+{
+    return TRUE;
+}
 
-    RefPtr<ImageGStreamer> gstImage = ImageGStreamer::createImage(m_buffer, caps.get());
-    if (!gstImage)
+void MediaPlayerPrivateGStreamer::paintToTextureMapper(TextureMapper* textureMapper, const FloatRect& targetRect, const TransformationMatrix& matrix, float opacity, BitmapTexture* mask)
+{
+    if (textureMapper->accelerationMode() != TextureMapper::OpenGLMode)
         return;
 
-    context->drawImage(reinterpret_cast<Image*>(gstImage->image().get()), ColorSpaceSRGB,
-                       rect, gstImage->rect(), CompositeCopy, DoNotRespectImageOrientation, false);
+    if (textureMapper != m_textureMapper) {
+        m_textureMapper = textureMapper; // @TODO Is this a sane enough?
+    }
+
+    IntSize size = naturalSize();
+
+    if (!m_texture) {
+        m_texture = textureMapper->acquireTextureFromPool(size);
+        if (!m_texture) {
+            LOG_MEDIA_MESSAGE("failed acquiring texture");
+        }
+    }
+
+    dequeueObjects();
+
+    if (m_texture) {
+        updateTexture();
+        TransformationMatrix mmatrix = matrix;
+        mmatrix.setM22(-mmatrix.m22());
+        mmatrix.setM42(targetRect.maxY() + mmatrix.m42());
+        textureMapper->drawTexture(*m_texture.get(), targetRect, mmatrix, opacity);
+    }
 }
+#endif
 
 static HashSet<String> mimeTypeCache()
 {
@@ -1717,10 +2080,6 @@
 PlatformMedia MediaPlayerPrivateGStreamer::platformMedia() const
 {
     PlatformMedia p;
-#ifndef GST_API_VERSION_1
-    p.type = PlatformMedia::GStreamerGWorldType;
-    p.media.gstreamerGWorld = m_gstGWorld.get();
-#endif
     return p;
 }
 
@@ -1764,11 +2123,8 @@
     ASSERT(!m_playBin);
     m_playBin = gst_element_factory_make(gPlaybinName, "play");
 
-#ifndef GST_API_VERSION_1
-    m_gstGWorld = GStreamerGWorld::createGWorld(m_playBin);
-#endif
-
     GstBus* bus = gst_pipeline_get_bus(GST_PIPELINE(m_playBin));
+    gst_bus_set_sync_handler (bus, (GstBusSyncHandler) mediaPlayerPrivateSyncMessageCallback, this);
     gst_bus_add_signal_watch(bus);
     g_signal_connect(bus, "message", G_CALLBACK(mediaPlayerPrivateMessageCallback), this);
     gst_object_unref(bus);
@@ -1781,96 +2137,18 @@
     g_signal_connect(m_playBin, "video-changed", G_CALLBACK(mediaPlayerPrivateVideoChangedCallback), this);
     g_signal_connect(m_playBin, "audio-changed", G_CALLBACK(mediaPlayerPrivateAudioChangedCallback), this);
 
-#ifndef GST_API_VERSION_1
-    m_webkitVideoSink = webkitVideoSinkNew(m_gstGWorld.get());
-#else
-    m_webkitVideoSink = webkitVideoSinkNew();
-#endif
-    m_videoSinkPad = adoptGRef(gst_element_get_static_pad(m_webkitVideoSink, "sink"));
-
-    g_signal_connect(m_webkitVideoSink, "repaint-requested", G_CALLBACK(mediaPlayerPrivateRepaintCallback), this);
-
-
-#ifndef GST_API_VERSION_1
-    m_videoSinkBin = gst_bin_new("sink");
-
-    GstElement* videoTee = gst_element_factory_make("tee", "videoTee");
-    GstElement* queue = gst_element_factory_make("queue", 0);
-
-    // Take ownership.
-    gst_object_ref_sink(m_videoSinkBin);
-
-    // Build a new video sink consisting of a bin containing a tee
-    // (meant to distribute data to multiple video sinks) and our
-    // internal video sink. For fullscreen we create an autovideosink
-    // and initially block the data flow towards it and configure it
-
-    gst_bin_add_many(GST_BIN(m_videoSinkBin), videoTee, queue, NULL);
-
-    // Link a new src pad from tee to queue1.
-    GRefPtr<GstPad> srcPad = adoptGRef(gst_element_get_request_pad(videoTee, "src%d"));
-    GRefPtr<GstPad> sinkPad = adoptGRef(gst_element_get_static_pad(queue, "sink"));
-    gst_pad_link(srcPad.get(), sinkPad.get());
-#endif
-
-    GstElement* actualVideoSink = 0;
-    m_fpsSink = gst_element_factory_make("fpsdisplaysink", "sink");
-    if (m_fpsSink) {
-        // The verbose property has been added in -bad 0.10.22. Making
-        // this whole code depend on it because we don't want
-        // fpsdiplaysink to spit data on stdout.
-        GstElementFactory* factory = GST_ELEMENT_FACTORY(GST_ELEMENT_GET_CLASS(m_fpsSink)->elementfactory);
-        if (gst_plugin_feature_check_version(GST_PLUGIN_FEATURE(factory), 0, 10, 22)) {
-            g_object_set(m_fpsSink, "silent", TRUE , NULL);
-
-            // Turn off text overlay unless logging is enabled.
-#if LOG_DISABLED
-            g_object_set(m_fpsSink, "text-overlay", FALSE , NULL);
-#else
-            WTFLogChannel* channel = getChannelFromName("Media");
-            if (channel->state != WTFLogChannelOn)
-                g_object_set(m_fpsSink, "text-overlay", FALSE , NULL);
-#endif // LOG_DISABLED
-
-            if (g_object_class_find_property(G_OBJECT_GET_CLASS(m_fpsSink), "video-sink")) {
-                g_object_set(m_fpsSink, "video-sink", m_webkitVideoSink, NULL);
-#ifndef GST_API_VERSION_1
-                gst_bin_add(GST_BIN(m_videoSinkBin), m_fpsSink);
-#endif
-                actualVideoSink = m_fpsSink;
-            } else
-                m_fpsSink = 0;
-        } else
-            m_fpsSink = 0;
-    }
-
-    if (!m_fpsSink) {
-#ifndef GST_API_VERSION_1
-        gst_bin_add(GST_BIN(m_videoSinkBin), m_webkitVideoSink);
-#endif
-        actualVideoSink = m_webkitVideoSink;
-    }
-
-    ASSERT(actualVideoSink);
-
-#ifndef GST_API_VERSION_1
-    // Faster elements linking.
-    gst_element_link_pads_full(queue, "src", actualVideoSink, "sink", GST_PAD_LINK_CHECK_NOTHING);
-
-    // Add a ghostpad to the bin so it can proxy to tee.
-    GRefPtr<GstPad> pad = adoptGRef(gst_element_get_static_pad(videoTee, "sink"));
-    gst_element_add_pad(m_videoSinkBin, gst_ghost_pad_new("sink", pad.get()));
-
-    // Set the bin as video sink of playbin.
-    g_object_set(m_playBin, "video-sink", m_videoSinkBin, NULL);
-#else
-    g_object_set(m_playBin, "video-sink", actualVideoSink, NULL);
-#endif
-
-    GRefPtr<GstPad> videoSinkPad = adoptGRef(gst_element_get_static_pad(m_webkitVideoSink, "sink"));
-    if (videoSinkPad)
-        g_signal_connect(videoSinkPad.get(), "notify::caps", G_CALLBACK(mediaPlayerPrivateVideoSinkCapsChangedCallback), this);
+    m_videoSink = gst_element_factory_make("fakesink", "vsink");
+    g_object_set (m_videoSink, "sync", TRUE, "silent", TRUE,
+        "enable-last-buffer", FALSE,
+        "max-lateness", 20 * GST_MSECOND, "signal-handoffs", TRUE, NULL);
+    g_signal_connect (m_videoSink, "preroll-handoff", G_CALLBACK (mediaPlayerPrivateVideoPrerollCallback), this);
+    g_signal_connect (m_videoSink, "handoff", G_CALLBACK (mediaPlayerPrivateVideoBufferCallback), this);
+
+    m_videoSinkPad = adoptGRef(gst_element_get_static_pad(m_videoSink, "sink"));
+    g_signal_connect(m_videoSinkPad.get(), "notify::caps", G_CALLBACK(mediaPlayerPrivateVideoSinkCapsChangedCallback), this);
+    gst_pad_add_event_probe(m_videoSinkPad.get(), G_CALLBACK (mediaPlayerPrivateVideoEventCallback), this);
 
+    g_object_set(m_playBin, "video-sink", gst_object_ref (m_videoSink), NULL);
 }
 
 }
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h	2013-04-09 02:11:44.000000000 +0200
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h	2013-05-16 20:58:36.090204327 +0200
@@ -32,11 +32,20 @@
 #include <gst/gst.h>
 #include <wtf/Forward.h>
 
-typedef struct _WebKitVideoSink WebKitVideoSink;
+#if USE(ACCELERATED_COMPOSITING) && USE(TEXTURE_MAPPER_GL)
+#include "texmap/TextureMapper.h"
+#include "texmap/TextureMapperGL.h"
+#endif
+
 typedef struct _GstBuffer GstBuffer;
 typedef struct _GstMessage GstMessage;
 typedef struct _GstElement GstElement;
 
+typedef struct _GstEGLImageMemoryPool GstEGLImageMemoryPool;
+typedef struct _GstEGLImageMemory GstEGLImageMemory;
+
+typedef struct _EGLDetails EGLDetails;
+
 namespace WebCore {
 
 class GraphicsContext;
@@ -45,8 +54,11 @@
 class GStreamerGWorld;
 class MediaPlayerPrivateGStreamer;
 
-class MediaPlayerPrivateGStreamer : public MediaPlayerPrivateInterface {
-
+class MediaPlayerPrivateGStreamer : public MediaPlayerPrivateInterface
+#if USE(ACCELERATED_COMPOSITING) && USE(TEXTURE_MAPPER_GL)
+                                  , public TextureMapperPlatformLayer
+#endif
+{
         public:
             ~MediaPlayerPrivateGStreamer();
             static void registerMediaEngine(MediaEngineRegistrar);
@@ -124,8 +136,19 @@
             unsigned audioDecodedByteCount() const;
             unsigned videoDecodedByteCount() const;
 
+#if USE(ACCELERATED_COMPOSITING) && USE(TEXTURE_MAPPER_GL)
+            virtual PlatformLayer* platformLayer() const { return const_cast<MediaPlayerPrivateGStreamer*>(this); }
+            virtual bool supportsAcceleratedRendering() const;
+            virtual void paintToTextureMapper(TextureMapper*, const FloatRect& targetRect, const TransformationMatrix&, float opacity, BitmapTexture* mask);
+#endif
             MediaPlayer::MovieLoadType movieLoadType() const;
 
+            gboolean queueObject(GstMiniObject * obj, gboolean synchronous);
+            void dequeueObjects();
+            void queueFlushStart();
+            void queueFlushStop();
+            void triggerRepaint();
+
         private:
             MediaPlayerPrivateGStreamer(MediaPlayer*);
 
@@ -155,12 +178,14 @@
             virtual String engineDescription() const { return "GStreamer"; }
             bool isLiveStream() const { return m_isStreaming; }
 
+            void flushLastEGLMemory();
+            void updateTexture();
+            GstEGLImageMemoryPool* createEGLPool(gint size, gint width, gint height);
+
         private:
             MediaPlayer* m_player;
             GstElement* m_playBin;
-            GstElement* m_webkitVideoSink;
-            GstElement* m_videoSinkBin;
-            GstElement* m_fpsSink;
+            GstElement* m_videoSink;
             GRefPtr<GstElement> m_source;
             float m_seekTime;
             bool m_changingRate;
@@ -170,7 +195,6 @@
             MediaPlayer::ReadyState m_readyState;
             mutable bool m_isStreaming;
             IntSize m_size;
-            GstBuffer* m_buffer;
             GstStructure* m_mediaLocations;
             int m_mediaLocationCurrentIndex;
             bool m_resetPipeline;
@@ -188,9 +212,6 @@
             bool m_delayingLoad;
             bool m_mediaDurationKnown;
             mutable float m_maxTimeLoadedAtLastDidLoadingProgress;
-#ifndef GST_API_VERSION_1
-            RefPtr<GStreamerGWorld> m_gstGWorld;
-#endif
             guint m_volumeTimerHandler;
             guint m_muteTimerHandler;
             bool m_hasVideo;
@@ -203,6 +224,18 @@
             mutable IntSize m_videoSize;
             KURL m_url;
             bool m_originalPreloadWasAutoAndWasOverridden;
+#if USE(ACCELERATED_COMPOSITING) && USE(TEXTURE_MAPPER_GL)
+            RefPtr<BitmapTexture> m_texture;
+            TextureMapper* m_textureMapper;
+#endif
+            GAsyncQueue *m_queue;
+            GMutex *m_queueLock;
+            GMutex *m_flowLock;        
+            GCond *m_queueCond;
+            bool m_queueFlushing;
+            GstMiniObject *m_queueLastObject;
+            GstEGLImageMemory *m_lastEGLMemory;
+            EGLDetails *m_egl_details;
     };
 }
 
--- a/Source/WebCore/platform/graphics/texmap/GraphicsLayerTextureMapper.h	2013-04-09 02:11:44.000000000 +0200
+++ b/Source/WebCore/platform/graphics/texmap/GraphicsLayerTextureMapper.h	2013-05-16 20:57:57.314202740 +0200
@@ -68,6 +68,7 @@
     virtual void setContentsToImage(Image*);
     virtual void setContentsToMedia(PlatformLayer*);
     virtual void setContentsToCanvas(PlatformLayer* canvas) { setContentsToMedia(canvas); }
+    virtual bool hasContentsLayer() const { return m_contentsLayer; }
     virtual void flushCompositingState(const FloatRect&);
     virtual void flushCompositingStateForThisLayerOnly();
     virtual void setName(const String& name);
--- a/Source/WebCore/rendering/RenderLayerBacking.cpp	2013-04-09 02:11:43.000000000 +0200
+++ b/Source/WebCore/rendering/RenderLayerBacking.cpp	2013-05-16 20:57:57.314202740 +0200
@@ -1477,8 +1477,13 @@
 {
     ASSERT(!paintsIntoCompositedAncestor());
     
-    if (m_graphicsLayer && m_graphicsLayer->drawsContent())
-        m_graphicsLayer->setNeedsDisplay();
+    if (m_graphicsLayer) {
+        if (m_graphicsLayer->hasContentsLayer()) {
+            m_graphicsLayer->setContentsNeedsDisplay();
+        } else if (m_graphicsLayer->drawsContent()) {
+            m_graphicsLayer->setNeedsDisplay();
+        }
+    }
     
     if (m_foregroundLayer && m_foregroundLayer->drawsContent())
         m_foregroundLayer->setNeedsDisplay();
@@ -1495,10 +1500,14 @@
 {
     ASSERT(!paintsIntoCompositedAncestor());
 
-    if (m_graphicsLayer && m_graphicsLayer->drawsContent()) {
-        IntRect layerDirtyRect = r;
-        layerDirtyRect.move(-m_graphicsLayer->offsetFromRenderer());
-        m_graphicsLayer->setNeedsDisplayInRect(layerDirtyRect);
+    if (m_graphicsLayer) {
+        if (m_graphicsLayer->hasContentsLayer()) {
+            m_graphicsLayer->setContentsNeedsDisplay();
+        } else if (m_graphicsLayer->drawsContent()) {
+            IntRect layerDirtyRect = r;
+            layerDirtyRect.move(-m_graphicsLayer->offsetFromRenderer());
+            m_graphicsLayer->setNeedsDisplayInRect(layerDirtyRect);
+        }
     }
 
     if (m_foregroundLayer && m_foregroundLayer->drawsContent()) {
--- a/Source/WebCore/WebCore.pri	2013-04-09 02:11:45.000000000 +0200
+++ b/Source/WebCore/WebCore.pri	2013-05-16 20:57:57.314202740 +0200
@@ -167,7 +167,7 @@
 
 use?(GSTREAMER) {
     DEFINES += ENABLE_GLIB_SUPPORT=1
-    PKGCONFIG += glib-2.0 gio-2.0 gstreamer-0.10 gstreamer-app-0.10 gstreamer-base-0.10 gstreamer-interfaces-0.10 gstreamer-pbutils-0.10 gstreamer-plugins-base-0.10 gstreamer-video-0.10
+    PKGCONFIG += glib-2.0 gio-2.0 gstreamer-0.10 gstreamer-app-0.10 gstreamer-base-0.10 gstreamer-interfaces-0.10 gstreamer-pbutils-0.10 gstreamer-plugins-base-0.10 gstreamer-video-0.10 gstreamer-egl-0.10
 }
 
 enable?(VIDEO) {
